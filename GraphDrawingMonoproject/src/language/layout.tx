Layout:
	LayoutGraph | LayoutSubgraphs
;

LayoutGraph:
	'lay' 'out' 'graph' layoutType = LayoutEnum
;

LayoutSubgraphs:
	'lay' 'out' layoutSubgraphs += LayoutSubraph[';']
;

LayoutSubraph:
	(subgraph = Subgraph |  'others')  layoutType = LayoutEnum 	
;

Subgraph:
	'subgraph' 'containing'? vertices += Vertex[',']
;


LayoutEnum:
	LayoutStyle | AestheticCriteriaMath | AestheticCriteria | LayoutAlgorithm 
;

LayoutStyle:
	'using'? 'style' style = LayoutStyleEnum
;

LayoutStyleEnum:
	'automatic' | 'circular' | 'tree' | 'hierarchical' | 'symmetric' | 'general'
;

AestheticCriteria:
	('conforming' 'to')? 'criteria'? aestheticCriteria += AestheticCriteion[',']
;


LayoutAlgorithm:
	'using'? 'algorithm'? algorithm = LayoutAlgorithmEnum
;

AestheticCriteriaMath:
	expression = CriteriaExpression	
;

CriteriaFactor:
	negative ?= 'not' ( criterion = AestheticCriteion | ('(' expression = CriteriaExpression ')'))
;

CriteriaTerm:
	termStartFactor = CriteriaFactor termFactors *=  CriteriaAndFactor
;

CriteriaAndFactor:
	'and' factor = CriteriaFactor
;

CriteriaExpression:
	expressionStartTerm = CriteriaTerm expressionTerms *= CriteriaOrTerm
;

CriteriaOrTerm:
	'or' term = CriteriaTerm
;

AestheticCriteion:
	EdgeCrossings | MinimumAngles | MinimumBands |
	UniformFlow | Symmetry  | 
	NodeDistribution | EdgeLengths | EdgeVariation
;

EdgeCrossings:
	MinimizeCrossings |  Planar
;

MinimizeCrossings:
	('minimization' 'of')? 'edge' criterion = 'crossings'
;
Planar:
	criterion = 'planarity'
;

MinimumAngles:
	('maximization' 'of' 'minimum')? criterion = 'angle' ('threshold' '=' threshold = INT)?
;

MinimumBands:
	('minimization' 'of')? criterion = 'bands'
;

UniformFlow:
	'uniform'? criterion = 'flow' ('direction' '=' direction = Orientation)?
;

Symmetry:
	criterion = 'symmetry' ('automorphism' automorphism = Automorphism)?
;


NodeDistribution:
	'even' 'nodes' criterion = 'distribution'
;

EdgeLengths:
	criterion = 'optimization' 'of' 'edges' 'lengths'
;

EdgeVariation:
	criterion = 'similar' 'edges' 'lengths'
;


LayoutAlgorithmEnum:
	TreeAlgorithm | StraightLineAlgorithm | HierarchicalAlgorithm |
	CircularAlgorithm | SymmetricAlgorithm | ForceDirectedAlgorithm |
	BoxAlgorithm
;

TreeAlgorithm:
	RadialTreeAlgorithm | LevelBasedTreeAlgorithm | CompactTreeAlgorithm |
	NodeLinkTreeAlgorithm | BalloonTreeAlgorithm
;

RadialTreeAlgorithm:
	name = 'radial' 'tree'
	('(' properties *= RadialTreeAlgorithmProperty[','] ')')?
;

RadialTreeAlgorithmProperty:
	HorizontalTreeProperty | VerticalTreeProperty
;

HorizontalTreeProperty:
	'horizontal' 'distance'? '=' xDist = INT
;

VerticalTreeProperty:
	'vertical' 'distance'? '=' yDist = INT
;

LevelBasedTreeAlgorithm:
	name = 'level' 'based' 'tree'
	('('properties *= LevelBasedTreeAlgorithmProperty[',']')')?
;

LevelBasedTreeAlgorithmProperty:
	HorizontalTreeProperty | VerticalTreeProperty
;

CompactTreeAlgorithm:
	name = 'compact' 'tree'
	('('properties *= CompactTreeAlgorithmProperty[',']')')?
;

CompactTreeAlgorithmProperty:
	IsHorizontalProperty | IsInvertProperty | IsResizeParentsProperty |
	LevelDistanceProperty | NodeDistanceProperty
;

IsHorizontalProperty:
	horizontal ?= 'horizontal'
;

IsInvertProperty:
	invert ?= 'invert'
;
	
IsResizeParentsProperty:
	resizeParents ?= 'resize' 'parents'
;

LevelDistanceProperty:
	'level' ' distance' '=' levelDistance = INT
;

NodeDistanceProperty:
	'node' 'distance' '=' nodeDistance = INT
;
	
NodeLinkTreeAlgorithm:
	name = 'node' 'link' 'tree'
	('('properties *= NodeLinkTreeAlgorithmProperty[',']')')?
;

NodeLinkTreeAlgorithmProperty:
	OrientationProperty | SpacingSiblingsProperty | SpacingSubtreesProperty | 
	SpacingLevelsProperty | OffsetForRootNodeProperty
;

OrientationProperty:
	'orientation' '=' orientation = Orientation
;

SpacingSiblingsProperty:
	'spacing' 'between'? 'siblings' '=' spacingSiblings = FLOAT
;

SpacingSubtreesProperty:
	'spacing' 'between'? 'subtrees' '=' spacingSubtrees = FLOAT
;

SpacingLevelsProperty:
	'spacing' 'between'? 'depth'? 'levels' '=' spacingLevels = FLOAT
;

OffsetForRootNodeProperty:
	'offset' 'for'? 'root' 'node'? '=' offsetRootNode = FLOAT
;
	
BalloonTreeAlgorithm:
	name = 'balloon' 'tree'
	('('properties *= BalloonTreeAlgorithmProperty[',']')')?
;

//this was done in order to avoid inconsistencies  with other rules of this kind and to enable easy addition of additional properties 
BalloonTreeAlgorithmProperty:
	MinimalRadiusProperty
;

MinimalRadiusProperty:
	'minimum' 'radius' '=' minRadius = INT
;

HierarchicalAlgorithm:
	name = 'hierarchical'
	('('properties *= HierarchicalAlgorithmProperty[',']')')?
;

HierarchicalAlgorithmProperty:
	IsResizeParentsProperty | ParentBorderProperty | IsMoveParentProperty  | 
	IntraCellSpacingProperty | InterRankSpacingProperty | InterHierarchySpacingProperty |
	ParallelEdgesSpacingProperty | OrientationProperty | IsFineTuneProperty
;

IsMoveParentProperty:
	moveParent ?= 'move' 'parent'
;

ParentBorderProperty:
	 'parent' 'border' '=' parentBorder = INT
;

IntraCellSpacingProperty:
	'same' 'layer' 'spacing' '='  intraCellSpacing = FLOAT
;

InterRankSpacingProperty:
	'adjacent' 'layers' 'spacing' '=' interRankSpacing = FLOAT
;

InterHierarchySpacingProperty:
	'hierarchy' 'spacing' '=' interHierarchySpacing = FLOAT
;

ParallelEdgesSpacingProperty:
	'parallel' 'edges' 'spacing' '=' parallelEdgesSpacing = FLOAT
;

IsFineTuneProperty:	
	fineTune ?= 'fine' 'tune'
;

CircularAlgorithm:
	name = 'circular'
	('('properties *= CircularAlgorithmProperty[',']')')?
;

CircularAlgorithmProperty:
	IsOptimizeCrossingProperty | DistanceProperty
;

IsOptimizeCrossingProperty:
	optimize ?= 'optimize' 'crossings'
;
DistanceProperty:
	'distance' '=' dist = INT
;

SymmetricAlgorithm:
	ConcentricSymmetricAlgorithm
;

ConcentricSymmetricAlgorithm:
	name = 'concentric' 'symmetric'
	('('properties *= ConcentricSymmetricAlgorithmProperty[',']')')?
;

ConcentricSymmetricAlgorithmProperty:
	AutomorphismProperty
;
AutomorphismProperty:
	'automorphism' '=' automorphism = Automorphism
;

PlanarSymmetricAlgorithm:
	type = 'planar' 'name = symmetric'
;

ForceDirectedAlgorithm:
	KamadaKawai | FruchtermanReingold | Spring |
	FastOrganic | Organic
;

KamadaKawai:
	name = 'Kamada' '-' 'Kawai'
	('('properties *= KamadaKawaiProperties[',']')')?
;

KamadaKawaiProperties:
	DisconnectedDistanceMultiplierProperty | LengthFactorProperty | 
	MaxIterationsProperty
;

DisconnectedDistanceMultiplierProperty:
	'disconnected'? 'distance' 'multiplier' '=' distanceMultiplier = FLOAT
;
LengthFactorProperty:
	'length' 'factor' '=' lengthFactor = FLOAT
;
MaxIterationsProperty:
	'maximum' 'iterations' '=' maxIterations = INT
;

FruchtermanReingold:
	name = 'Fruchterman' '-' 'Reingold'
	('('properties *= FruchtermanReingoldProperty[',']')')?
;

FruchtermanReingoldProperty:
	AttractionMultiplierProperty | ResolutionMultiplierProperty | MaxIterationsProperty
;

AttractionMultiplierProperty:
	'attraction' 'multiplier' '=' attractionMultiplier = FLOAT
;

ResolutionMultiplierProperty:
	'resolution' 'multiplier' '=' resolutionMultiplier = FLOAT
;

Spring:
	name = 'spring'
	('('properties *= SpringProperty[',']')')?
;

SpringProperty:
	StretchProperty | RepulsionRangeProperty | ForceMultiplierProperty
;

StretchProperty:
	'stretch' '=' stretch = FLOAT
;

RepulsionRangeProperty:
	'repulsion' 'range' '=' resolutionRange = INT
;

ForceMultiplierProperty:
	'force' 'multiplier' '=' forceMultiplier = FLOAT
;

FastOrganic:
	type = 'fast' name = 'organic'
	('('properties *= FastOrganicProperty[',']')')?
;

FastOrganicProperty:
	ForceConstantProperty | MinimalDistanceLimitProperty |
	InitialTemperatureProperty | MaxIterationsProperty
;

ForceConstantProperty:
	'force' 'constant' '=' forceConstant = FLOAT
;

MinimalDistanceLimitProperty:
	'minimal' 'distance' 'limit' '=' minimalDistanceLimit = FLOAT
;

InitialTemperatureProperty:
	'initial' 'temperature' '=' initialTemperature = FLOAT
;

Organic:
	name = 'organic'
	('('properties *= OrganicProperty[',']')')?
;

OrganicProperty:
	EdgeCrossingFactorProperty | IsOptimizeEdgeCrossingsProperty |
	EdgeDistanceFactorProperty | IsOptimizeEdgeDistanceProperty |
	BorderLineFactorProperty | IsOptimizeBorderLineProperty |
	NodeDistributionFactorProperty | IsOptimizeNodeDistributionProperty |
	FineTuningRadiusProperty | IsFineTuneProperty |
	AverageNodeAreaProperty | AverageScaleFactorProperty |
	MaxIterationsProperty
;

IsOptimizeEdgeCrossingsProperty:
	optimizeEdgeCrossings ?=  'optimize' 'edge' 'crossings'
;

EdgeCrossingFactorProperty:
	'edge' 'crossing' 'factor' '=' edgeCrossingFactor = FLOAT
;

IsOptimizeEdgeDistanceProperty:
	optimizeEdgeDistance ?=  'optimize' 'edge' 'distance'
;

EdgeDistanceFactorProperty:
	'edge' 'distance' 'factor' '=' edgeDistanceFactor = FLOAT
;


IsOptimizeBorderLineProperty:
	optimizeBorderLine ?=  'optimize' 'border' 'line'
;

BorderLineFactorProperty:
	'border' 'line' 'factor' '=' borderLineFactor = FLOAT
;


IsOptimizeNodeDistributionProperty:
	optimizeNodeDistribution ?=  'optimize' 'node' 'distribution'
;

NodeDistributionFactorProperty:
	'node' 'distribution' 'factor' '=' nodeDistributionFactor = FLOAT
;

FineTuningRadiusProperty:
	'fine' 'tuning' 'radius' '=' fineTuningRadius = FLOAT
;

AverageNodeAreaProperty:
	'average' 'node' 'area' '=' averageNodeArea = FLOAT
;

AverageScaleFactorProperty:
	'average' 'scale' 'factor' '=' averageScaleFactor = FLOAT
;


BoxAlgorithm:
	name = 'box'
	('('properties *= BoxAlgorithmPropery[',']')')?
;

BoxAlgorithmPropery:
	ColumnsProperty
;

ColumnsProperty:
	'columns' '=' numOfColumns = INT
;


StraightLineAlgorithm:
 	TutteEmbedding | ConvexAlgorithm | OrthogonalAlgorithm
;

TutteEmbedding:
	name = 'Tutte' 'embedding'?
	('('properties *= TutteEmbeddingProperty[',']')')?
;

TutteEmbeddingProperty:
	DistanceProperty
;

DistanceProperty:
	'distance' '=' dist = INT
;

ConvexAlgorithm:
	name = 'convex'
	('('properties *= ConvexAlgorithmProperty[',']')')?
;

ConvexAlgorithmProperty:
	DistanceProperty
;

OrthogonalAlgorithm:
	name = 'orthogonal'
	properties *= OrthogonalAlgorithmProperty[',']
;

//it is almost certain that there will be more properties
OrthogonalAlgorithmProperty:
	RectnagularProperty
;

RectnagularProperty:
	rectangular ?= 'rectangular'
;


Vertex:
	'v' index = INT | content = STRING
;

Automorphism:
	'(' vertices += Vertex[','] ')'
;

Orientation:
	'left' | 'right' | 'up' | 'down'
;

Comment:
 	/\/\/.*$/
;

	